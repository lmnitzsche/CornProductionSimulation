{"version":3,"file":"index-7b7a3e70.js","sources":["../../src/core/gdu-calculator-pro.ts","../../src/data/illinois-counties.ts","../../src/components/illinois-county-map.ts","../../src/components/educational-content.ts","../../src/app/corn-view-app.ts","../../src/main.ts"],"sourcesContent":["import { CountyData } from '../data/illinois-counties';\n\n/**\n * Professional Growing Degree Unit (GDU) Calculator\n * Based on University of Illinois and USDA research\n */\n\nexport interface GDUCalculationParams {\n  maxTemp: number;\n  minTemp: number;\n  baseTemp: number;\n  capTemp: number;\n  method: 'modified' | 'standard';\n}\n\nexport interface CornGrowthStage {\n  stage: string;\n  code: string;\n  gduRequired: number;\n  description: string;\n  criticalFactors: string[];\n  yieldImpact: number; // 0-1 multiplier\n}\n\nexport interface YieldFactors {\n  soilMoisture: number; // 0-1 (0 = drought, 1 = optimal)\n  nitrogen: number; // lbs/acre\n  phosphorus: number; // lbs/acre\n  potassium: number; // lbs/acre\n  plantPopulation: number; // plants per acre\n  diseasePress: number; // 0-1 (0 = no disease, 1 = severe)\n  insectPress: number; // 0-1 (0 = no insects, 1 = severe)\n  weedPress: number; // 0-1 (0 = no weeds, 1 = severe)\n}\n\nexport class ProfessionalGDUCalculator {\n  private readonly BASE_TEMP = 50; // °F\n  private readonly CAP_TEMP = 86; // °F for corn\n  \n  // University of Illinois corn growth stages with accurate GDU requirements\n  private readonly GROWTH_STAGES: CornGrowthStage[] = [\n    {\n      stage: 'Emergence',\n      code: 'VE',\n      gduRequired: 115,\n      description: 'Coleoptile breaks soil surface',\n      criticalFactors: ['soil temperature', 'soil moisture', 'planting depth'],\n      yieldImpact: 0.85\n    },\n    {\n      stage: '2-Leaf',\n      code: 'V2',\n      gduRequired: 200,\n      description: 'Second leaf collar visible',\n      criticalFactors: ['nitrogen availability', 'root development'],\n      yieldImpact: 0.90\n    },\n    {\n      stage: '4-Leaf',\n      code: 'V4',\n      gduRequired: 350,\n      description: 'Fourth leaf collar visible',\n      criticalFactors: ['moisture stress', 'nitrogen uptake'],\n      yieldImpact: 0.92\n    },\n    {\n      stage: '6-Leaf',\n      code: 'V6',\n      gduRequired: 500,\n      description: 'Sixth leaf collar visible, rapid growth begins',\n      criticalFactors: ['nutrient availability', 'moisture', 'temperature'],\n      yieldImpact: 0.95\n    },\n    {\n      stage: '8-Leaf',\n      code: 'V8',\n      gduRequired: 650,\n      description: 'Eighth leaf collar visible',\n      criticalFactors: ['moisture stress sensitivity increases'],\n      yieldImpact: 0.95\n    },\n    {\n      stage: '10-Leaf',\n      code: 'V10',\n      gduRequired: 850,\n      description: 'Tenth leaf collar visible',\n      criticalFactors: ['ear shoot development', 'moisture critical'],\n      yieldImpact: 0.96\n    },\n    {\n      stage: '12-Leaf',\n      code: 'V12',\n      gduRequired: 1050,\n      description: 'Twelfth leaf collar visible',\n      criticalFactors: ['ear size determination', 'stress sensitivity peak'],\n      yieldImpact: 0.97\n    },\n    {\n      stage: 'Tasseling',\n      code: 'VT',\n      gduRequired: 1400,\n      description: 'Tassel emergence and pollen shed',\n      criticalFactors: ['moisture stress critical', 'heat stress', 'pollination'],\n      yieldImpact: 0.85\n    },\n    {\n      stage: 'Silking',\n      code: 'R1',\n      gduRequired: 1450,\n      description: 'Silks emerge from ear shoots',\n      criticalFactors: ['moisture critical', 'pollination window', 'heat stress'],\n      yieldImpact: 0.80\n    },\n    {\n      stage: 'Blister',\n      code: 'R2',\n      gduRequired: 1650,\n      description: 'Kernels resemble blisters, rapid grain fill begins',\n      criticalFactors: ['moisture for grain fill', 'nutrient availability'],\n      yieldImpact: 0.90\n    },\n    {\n      stage: 'Milk',\n      code: 'R3',\n      gduRequired: 1850,\n      description: 'Kernels contain milky fluid',\n      criticalFactors: ['moisture stress affects grain fill', 'disease pressure'],\n      yieldImpact: 0.95\n    },\n    {\n      stage: 'Dough',\n      code: 'R4',\n      gduRequired: 2050,\n      description: 'Grain fill continues, kernel moisture ~70%',\n      criticalFactors: ['continued moisture needs', 'disease/insect pressure'],\n      yieldImpact: 0.98\n    },\n    {\n      stage: 'Dent',\n      code: 'R5',\n      gduRequired: 2450,\n      description: 'Kernels begin to dent, ~55% moisture',\n      criticalFactors: ['grain fill completion', 'premature death prevention'],\n      yieldImpact: 0.99\n    },\n    {\n      stage: 'Maturity',\n      code: 'R6',\n      gduRequired: 2700,\n      description: 'Black layer formation, physiological maturity',\n      criticalFactors: ['harvest timing', 'field drying'],\n      yieldImpact: 1.0\n    }\n  ];\n\n  /**\n   * Calculate daily GDU using the modified method (University of Illinois standard)\n   */\n  calculateDailyGDU(maxTemp: number, minTemp: number): number {\n    // Cap temperatures\n    const cappedMax = Math.min(maxTemp, this.CAP_TEMP);\n    const cappedMin = Math.max(minTemp, this.BASE_TEMP);\n    \n    // If max temp is below base temp, no GDU accumulation\n    if (maxTemp <= this.BASE_TEMP) return 0;\n    \n    // Modified calculation method\n    const avgTemp = (cappedMax + cappedMin) / 2;\n    return Math.max(0, avgTemp - this.BASE_TEMP);\n  }\n\n  /**\n   * Calculate initial GDU based on county soil and environmental factors\n   */\n  calculateInitialGDU(countyData: CountyData, plantingFactors: {\n    plantingDate: Date;\n    plantingDepth: number; // inches\n    seedTreatment: boolean;\n    soilTemp: number;\n  }): number {\n    let initialGDU = 0;\n\n    // Soil temperature adjustment\n    if (plantingFactors.soilTemp >= 50) {\n      initialGDU += 25;\n    } else if (plantingFactors.soilTemp >= 45) {\n      initialGDU += 15;\n    }\n\n    // Planting depth adjustment (USDA research)\n    if (plantingFactors.plantingDepth > 2) {\n      initialGDU -= (plantingFactors.plantingDepth - 2) * 15;\n    }\n\n    // Soil drainage class adjustment\n    switch (countyData.soilData.drainageClass) {\n      case 'Well-drained':\n        initialGDU += 20;\n        break;\n      case 'Moderately well-drained':\n        initialGDU += 10;\n        break;\n      case 'Somewhat poorly drained':\n        initialGDU += 0;\n        break;\n      case 'Poorly drained':\n        initialGDU -= 15;\n        break;\n    }\n\n    // Seed treatment bonus\n    if (plantingFactors.seedTreatment) {\n      initialGDU += 10;\n    }\n\n    // Optimal planting date (May 1-15 for Illinois)\n    const optimalStart = new Date(plantingFactors.plantingDate.getFullYear(), 4, 1); // May 1\n    const optimalEnd = new Date(plantingFactors.plantingDate.getFullYear(), 4, 15); // May 15\n    \n    if (plantingFactors.plantingDate >= optimalStart && plantingFactors.plantingDate <= optimalEnd) {\n      initialGDU += 15;\n    } else if (plantingFactors.plantingDate < optimalStart) {\n      const daysDiff = Math.floor((optimalStart.getTime() - plantingFactors.plantingDate.getTime()) / (1000 * 60 * 60 * 24));\n      initialGDU -= daysDiff * 2; // Penalty for early planting\n    } else {\n      const daysDiff = Math.floor((plantingFactors.plantingDate.getTime() - optimalEnd.getTime()) / (1000 * 60 * 60 * 24));\n      initialGDU -= daysDiff * 1.5; // Penalty for late planting\n    }\n\n    return Math.max(0, initialGDU);\n  }\n\n  /**\n   * Calculate potential yield based on University of Illinois yield equations\n   */\n  calculatePotentialYield(\n    countyData: CountyData,\n    totalGDU: number,\n    yieldFactors: YieldFactors\n  ): number {\n    // Base potential yield for the county\n    let potentialYield = countyData.production.averageYield;\n\n    // GDU-based yield adjustment\n    const gduEfficiency = Math.min(1.0, totalGDU / 2700); // Optimal GDU for corn\n    potentialYield *= gduEfficiency;\n\n    // Soil quality adjustment\n    const soilRating = countyData.soilData.cornSuitabilityRating / 100;\n    potentialYield *= (0.7 + 0.3 * soilRating);\n\n    // Moisture stress adjustment (critical factor)\n    potentialYield *= (0.4 + 0.6 * yieldFactors.soilMoisture);\n\n    // Plant population adjustment (optimal: 32,000-36,000 plants/acre)\n    const popOptimal = 34000;\n    const popFactor = Math.min(1.0, yieldFactors.plantPopulation / popOptimal);\n    potentialYield *= popFactor;\n\n    // Nutrient adjustments (Liebig's Law of the Minimum)\n    const nFactor = Math.min(1.0, yieldFactors.nitrogen / 180); // Optimal N rate\n    const pFactor = Math.min(1.0, yieldFactors.phosphorus / 40); // Optimal P rate  \n    const kFactor = Math.min(1.0, yieldFactors.potassium / 160); // Optimal K rate\n    const nutrientFactor = Math.min(nFactor, pFactor, kFactor);\n    potentialYield *= (0.6 + 0.4 * nutrientFactor);\n\n    // Pest pressure adjustments\n    potentialYield *= (1 - yieldFactors.diseasePress * 0.3);\n    potentialYield *= (1 - yieldFactors.insectPress * 0.25);\n    potentialYield *= (1 - yieldFactors.weedPress * 0.4);\n\n    return Math.round(potentialYield * 100) / 100;\n  }\n\n  /**\n   * Get current growth stage based on accumulated GDU\n   */\n  getCurrentGrowthStage(totalGDU: number): CornGrowthStage | null {\n    for (let i = this.GROWTH_STAGES.length - 1; i >= 0; i--) {\n      if (totalGDU >= this.GROWTH_STAGES[i].gduRequired) {\n        return this.GROWTH_STAGES[i];\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get next growth stage\n   */\n  getNextGrowthStage(totalGDU: number): CornGrowthStage | null {\n    for (const stage of this.GROWTH_STAGES) {\n      if (totalGDU < stage.gduRequired) {\n        return stage;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Calculate days to next growth stage\n   */\n  getDaysToNextStage(currentGDU: number, averageDailyGDU: number): number {\n    const nextStage = this.getNextGrowthStage(currentGDU);\n    if (!nextStage) return 0;\n    \n    const gduNeeded = nextStage.gduRequired - currentGDU;\n    return Math.ceil(gduNeeded / averageDailyGDU);\n  }\n\n  /**\n   * Get all growth stages for reference\n   */\n  getAllGrowthStages(): CornGrowthStage[] {\n    return [...this.GROWTH_STAGES];\n  }\n\n  /**\n   * Calculate stress impact on yield\n   */\n  calculateStressImpact(\n    stressType: 'drought' | 'heat' | 'flooding' | 'hail' | 'frost',\n    severity: number, // 0-1\n    growthStage: CornGrowthStage\n  ): number {\n    const baseImpact = {\n      drought: 0.6,\n      heat: 0.4,\n      flooding: 0.3,\n      hail: 0.8,\n      frost: 0.9\n    };\n\n    // Critical growth stages have higher impact\n    const criticalMultiplier = ['VT', 'R1', 'R2'].includes(growthStage.code) ? 1.5 : 1.0;\n    \n    return baseImpact[stressType] * severity * criticalMultiplier * (1 - growthStage.yieldImpact);\n  }\n}","// Illinois County Agricultural Data\n// Based on USDA and University of Illinois Extension data\n\nexport interface CountyData {\n  name: string;\n  fips: string;\n  region: 'Northern' | 'Central' | 'Southern';\n  coordinates: [number, number]; // [lat, lng]\n  soilData: {\n    primarySoilType: string;\n    drainageClass: 'Well-drained' | 'Moderately well-drained' | 'Somewhat poorly drained' | 'Poorly drained';\n    organicMatter: number; // percentage\n    pH: number;\n    cornSuitabilityRating: number; // 1-100\n  };\n  climate: {\n    averageGDD: number; // Growing Degree Days (base 50°F)\n    averageRainfall: number; // inches per year\n    frostFreeDays: number;\n    zone: string; // Climate zone\n  };\n  production: {\n    averageYield: number; // bushels per acre\n    totalAcres: number;\n    rank: number; // 1-102 ranking in state\n  };\n  economics: {\n    averageRentPerAcre: number;\n    averageLandValue: number;\n  };\n}\n\nexport const illinoisCounties: CountyData[] = [\n  {\n    name: \"McLean\",\n    fips: \"17113\",\n    region: \"Central\",\n    coordinates: [40.4842, -88.9781],\n    soilData: {\n      primarySoilType: \"Drummer silty clay loam\",\n      drainageClass: \"Somewhat poorly drained\",\n      organicMatter: 4.2,\n      pH: 6.8,\n      cornSuitabilityRating: 95\n    },\n    climate: {\n      averageGDD: 3100,\n      averageRainfall: 37.5,\n      frostFreeDays: 175,\n      zone: \"5b\"\n    },\n    production: {\n      averageYield: 195,\n      totalAcres: 285000,\n      rank: 1\n    },\n    economics: {\n      averageRentPerAcre: 295,\n      averageLandValue: 12500\n    }\n  },\n  {\n    name: \"Champaign\",\n    fips: \"17019\",\n    region: \"Central\",\n    coordinates: [40.1164, -88.2434],\n    soilData: {\n      primarySoilType: \"Flanagan silt loam\",\n      drainageClass: \"Well-drained\",\n      organicMatter: 3.8,\n      pH: 6.5,\n      cornSuitabilityRating: 92\n    },\n    climate: {\n      averageGDD: 3050,\n      averageRainfall: 39.2,\n      frostFreeDays: 170,\n      zone: \"5b\"\n    },\n    production: {\n      averageYield: 188,\n      totalAcres: 195000,\n      rank: 3\n    },\n    economics: {\n      averageRentPerAcre: 285,\n      averageLandValue: 11800\n    }\n  },\n  {\n    name: \"Iroquois\",\n    fips: \"17075\",\n    region: \"Central\",\n    coordinates: [40.7436, -87.5831],\n    soilData: {\n      primarySoilType: \"Chalmers silty clay loam\",\n      drainageClass: \"Poorly drained\",\n      organicMatter: 4.5,\n      pH: 6.9,\n      cornSuitabilityRating: 88\n    },\n    climate: {\n      averageGDD: 2950,\n      averageRainfall: 36.8,\n      frostFreeDays: 165,\n      zone: \"5a\"\n    },\n    production: {\n      averageYield: 182,\n      totalAcres: 275000,\n      rank: 2\n    },\n    economics: {\n      averageRentPerAcre: 270,\n      averageLandValue: 10900\n    }\n  },\n  {\n    name: \"Ford\",\n    fips: \"17053\",\n    region: \"Central\",\n    coordinates: [40.4586, -88.1142],\n    soilData: {\n      primarySoilType: \"Elliott silt loam\",\n      drainageClass: \"Moderately well-drained\",\n      organicMatter: 3.9,\n      pH: 6.7,\n      cornSuitabilityRating: 90\n    },\n    climate: {\n      averageGDD: 3000,\n      averageRainfall: 38.1,\n      frostFreeDays: 168,\n      zone: \"5b\"\n    },\n    production: {\n      averageYield: 185,\n      totalAcres: 145000,\n      rank: 8\n    },\n    economics: {\n      averageRentPerAcre: 275,\n      averageLandValue: 11200\n    }\n  },\n  {\n    name: \"Livingston\",\n    fips: \"17105\",\n    region: \"Central\",\n    coordinates: [40.8614, -88.5431],\n    soilData: {\n      primarySoilType: \"Saunemin silt loam\",\n      drainageClass: \"Well-drained\",\n      organicMatter: 3.6,\n      pH: 6.6,\n      cornSuitabilityRating: 87\n    },\n    climate: {\n      averageGDD: 2980,\n      averageRainfall: 36.5,\n      frostFreeDays: 162,\n      zone: \"5a\"\n    },\n    production: {\n      averageYield: 178,\n      totalAcres: 205000,\n      rank: 5\n    },\n    economics: {\n      averageRentPerAcre: 260,\n      averageLandValue: 10500\n    }\n  },\n  {\n    name: \"Macon\",\n    fips: \"17115\",\n    region: \"Central\",\n    coordinates: [39.8481, -89.0037],\n    soilData: {\n      primarySoilType: \"Denny silt loam\",\n      drainageClass: \"Moderately well-drained\",\n      organicMatter: 4.1,\n      pH: 6.8,\n      cornSuitabilityRating: 89\n    },\n    climate: {\n      averageGDD: 3150,\n      averageRainfall: 38.7,\n      frostFreeDays: 178,\n      zone: \"6a\"\n    },\n    production: {\n      averageYield: 183,\n      totalAcres: 175000,\n      rank: 6\n    },\n    economics: {\n      averageRentPerAcre: 280,\n      averageLandValue: 11000\n    }\n  },\n  {\n    name: \"Sangamon\",\n    fips: \"17167\",\n    region: \"Central\",\n    coordinates: [39.6401, -89.6501],\n    soilData: {\n      primarySoilType: \"Ipava silt loam\",\n      drainageClass: \"Somewhat poorly drained\",\n      organicMatter: 3.7,\n      pH: 6.4,\n      cornSuitabilityRating: 85\n    },\n    climate: {\n      averageGDD: 3200,\n      averageRainfall: 37.9,\n      frostFreeDays: 180,\n      zone: \"6a\"\n    },\n    production: {\n      averageYield: 176,\n      totalAcres: 165000,\n      rank: 9\n    },\n    economics: {\n      averageRentPerAcre: 265,\n      averageLandValue: 10200\n    }\n  },\n  {\n    name: \"Piatt\",\n    fips: \"17147\",\n    region: \"Central\",\n    coordinates: [39.9781, -88.5431],\n    soilData: {\n      primarySoilType: \"Catlin silt loam\",\n      drainageClass: \"Well-drained\",\n      organicMatter: 4.0,\n      pH: 6.7,\n      cornSuitabilityRating: 93\n    },\n    climate: {\n      averageGDD: 3080,\n      averageRainfall: 38.9,\n      frostFreeDays: 172,\n      zone: \"5b\"\n    },\n    production: {\n      averageYield: 190,\n      totalAcres: 135000,\n      rank: 4\n    },\n    economics: {\n      averageRentPerAcre: 290,\n      averageLandValue: 12000\n    }\n  },\n  {\n    name: \"DeWitt\",\n    fips: \"17039\",\n    region: \"Central\",\n    coordinates: [40.1542, -88.7831],\n    soilData: {\n      primarySoilType: \"Drummer silty clay loam\",\n      drainageClass: \"Somewhat poorly drained\",\n      organicMatter: 4.3,\n      pH: 6.9,\n      cornSuitabilityRating: 91\n    },\n    climate: {\n      averageGDD: 3020,\n      averageRainfall: 37.8,\n      frostFreeDays: 168,\n      zone: \"5b\"\n    },\n    production: {\n      averageYield: 186,\n      totalAcres: 125000,\n      rank: 7\n    },\n    economics: {\n      averageRentPerAcre: 285,\n      averageLandValue: 11500\n    }\n  },\n  {\n    name: \"Logan\",\n    fips: \"17107\",\n    region: \"Central\",\n    coordinates: [40.1481, -89.4031],\n    soilData: {\n      primarySoilType: \"Hartsburg silty clay loam\",\n      drainageClass: \"Poorly drained\",\n      organicMatter: 4.4,\n      pH: 7.0,\n      cornSuitabilityRating: 86\n    },\n    climate: {\n      averageGDD: 3100,\n      averageRainfall: 37.2,\n      frostFreeDays: 170,\n      zone: \"5b\"\n    },\n    production: {\n      averageYield: 179,\n      totalAcres: 155000,\n      rank: 10\n    },\n    economics: {\n      averageRentPerAcre: 270,\n      averageLandValue: 10800\n    }\n  }\n];\n\nexport const getCountyByName = (name: string): CountyData | undefined => {\n  return illinoisCounties.find(county => \n    county.name.toLowerCase() === name.toLowerCase()\n  );\n};\n\nexport const getTopCountiesByYield = (count: number = 10): CountyData[] => {\n  return [...illinoisCounties]\n    .sort((a, b) => b.production.averageYield - a.production.averageYield)\n    .slice(0, count);\n};\n\nexport const getCountiesByRegion = (region: CountyData['region']): CountyData[] => {\n  return illinoisCounties.filter(county => county.region === region);\n};","import { CountyData, illinoisCounties } from '../data/illinois-counties';\n\nexport class IllinoisCountyMap {\n  private container: HTMLElement;\n  private selectedCounty: CountyData | null = null;\n  private onCountySelect: (county: CountyData) => void;\n\n  constructor(container: HTMLElement, onCountySelect: (county: CountyData) => void) {\n    this.container = container;\n    this.onCountySelect = onCountySelect;\n    this.init();\n  }\n\n  private init(): void {\n    this.container.innerHTML = `\n      <div class=\"county-selector-container\">\n        <div class=\"selector-header\">\n          <h2>Select an Illinois County</h2>\n          <p>Choose a county to view detailed corn production data and run simulations</p>\n        </div>\n        \n        <div class=\"county-search\">\n          <input type=\"text\" id=\"county-search\" placeholder=\"Search counties by name...\">\n        </div>\n        \n        <div class=\"sort-controls\">\n          <label for=\"sort-select\">Sort by:</label>\n          <select id=\"sort-select\">\n            <option value=\"gdd\" selected>Growing Degree Days (Default)</option>\n            <option value=\"name\">County Name</option>\n            <option value=\"yield\">Average Yield</option>\n            <option value=\"rank\">State Ranking</option>\n            <option value=\"acres\">Total Acres</option>\n          </select>\n        </div>\n\n        <div class=\"county-cards\" id=\"county-cards\">\n          ${this.createCountyCards()}\n        </div>\n      </div>\n    `;\n\n    this.setupEventListeners();\n  }\n\n  private createCountyCards(): string {\n    return illinoisCounties.map(county => `\n      <div class=\"county-card\" data-county=\"${county.name}\" data-region=\"${county.region}\">\n        <div class=\"county-header\">\n          <h3>${county.name} County</h3>\n          <span class=\"county-rank\">#${county.production.rank}</span>\n        </div>\n        \n        <div class=\"county-stats\">\n          <div class=\"stat\">\n            <span class=\"stat-label\">Avg Yield:</span>\n            <span class=\"stat-value\">${county.production.averageYield} bu/ac</span>\n          </div>\n          <div class=\"stat\">\n            <span class=\"stat-label\">Total Acres:</span>\n            <span class=\"stat-value\">${county.production.totalAcres.toLocaleString()}</span>\n          </div>\n          <div class=\"stat\">\n            <span class=\"stat-label\">Soil Rating:</span>\n            <span class=\"stat-value\">${county.soilData.cornSuitabilityRating}/100</span>\n          </div>\n          <div class=\"stat\">\n            <span class=\"stat-label\">Avg GDD:</span>\n            <span class=\"stat-value\">${county.climate.averageGDD}</span>\n          </div>\n        </div>\n        \n        <div class=\"county-details\">\n          <p><strong>Primary Soil:</strong> ${county.soilData.primarySoilType}</p>\n          <p><strong>Climate Zone:</strong> ${county.climate.zone}</p>\n          <p><strong>Region:</strong> ${county.region}</p>\n        </div>\n        \n        <button class=\"select-county-btn\" data-county=\"${county.name}\">\n          Select County\n        </button>\n      </div>\n    `).join('');\n  }\n\n\n\n  private setupEventListeners(): void {\n    // County selection from cards\n    this.container.addEventListener('click', (e) => {\n      const target = e.target as HTMLElement;\n      \n      if (target.classList.contains('select-county-btn')) {\n        const countyName = target.getAttribute('data-county');\n        const county = illinoisCounties.find(c => c.name === countyName);\n        if (county) {\n          this.selectCounty(county);\n        }\n      }\n    });\n\n    // Sort controls\n    const sortSelect = this.container.querySelector('#sort-select') as HTMLSelectElement;\n    sortSelect?.addEventListener('change', () => {\n      this.sortCounties(sortSelect.value);\n    });\n\n    // Search functionality\n    const searchInput = this.container.querySelector('#county-search') as HTMLInputElement;\n    searchInput?.addEventListener('input', () => {\n      this.searchCounties(searchInput.value);\n    });\n\n    // Initialize with GDD sorting\n    this.sortCounties('gdd');\n  }\n\n  private selectCounty(county: CountyData): void {\n    this.selectedCounty = county;\n    \n    // Update UI\n    this.container.querySelectorAll('.county-card').forEach(card => \n      card.classList.remove('selected')\n    );\n    \n    const selectedCard = this.container.querySelector(`[data-county=\"${county.name}\"]`);\n    selectedCard?.classList.add('selected');\n    \n    // Call the callback\n    this.onCountySelect(county);\n    \n    // Smooth scroll to show selection\n    selectedCard?.scrollIntoView({ behavior: 'smooth', block: 'nearest' });\n  }\n\n\n\n  private sortCounties(sortBy: string): void {\n    const cardsContainer = this.container.querySelector('#county-cards');\n    if (!cardsContainer) return;\n    \n    const cards = Array.from(cardsContainer.querySelectorAll('.county-card'));\n    \n    cards.sort((a, b) => {\n      const aCounty = illinoisCounties.find(c => c.name === a.getAttribute('data-county'));\n      const bCounty = illinoisCounties.find(c => c.name === b.getAttribute('data-county'));\n      \n      if (!aCounty || !bCounty) return 0;\n      \n      switch (sortBy) {\n        case 'gdd':\n          return bCounty.climate.averageGDD - aCounty.climate.averageGDD;\n        case 'yield':\n          return bCounty.production.averageYield - aCounty.production.averageYield;\n        case 'rank':\n          return aCounty.production.rank - bCounty.production.rank;\n        case 'acres':\n          return bCounty.production.totalAcres - aCounty.production.totalAcres;\n        case 'name':\n        default:\n          return aCounty.name.localeCompare(bCounty.name);\n      }\n    });\n    \n    // Re-append sorted cards\n    cards.forEach(card => cardsContainer.appendChild(card));\n  }\n\n  private searchCounties(searchTerm: string): void {\n    const cards = this.container.querySelectorAll('.county-card');\n    const term = searchTerm.toLowerCase();\n    \n    cards.forEach(card => {\n      const cardElement = card as HTMLElement;\n      const countyName = cardElement.getAttribute('data-county')?.toLowerCase();\n      \n      if (!term || countyName?.includes(term)) {\n        cardElement.style.display = 'block';\n      } else {\n        cardElement.style.display = 'none';\n      }\n    });\n  }\n\n  public getSelectedCounty(): CountyData | null {\n    return this.selectedCounty;\n  }\n\n  public highlightCounty(countyName: string): void {\n    const county = illinoisCounties.find(c => c.name === countyName);\n    if (county) {\n      this.selectCounty(county);\n    }\n  }\n}","export class EducationalContent {\n  private container: HTMLElement;\n\n  constructor(container: HTMLElement) {\n    this.container = container;\n    this.init();\n  }\n\n  private init(): void {\n    this.container.innerHTML = `\n      <div class=\"education-panel\">\n        <div class=\"education-header\">\n          <h2>🌽 Learn About Corn Production</h2>\n          <p>Understanding the science behind corn growth and yield prediction</p>\n        </div>\n\n        <div class=\"education-tabs\">\n          <button class=\"tab-btn active\" data-tab=\"gdu\">Growing Degree Units</button>\n          <button class=\"tab-btn\" data-tab=\"growth\">Growth Stages</button>\n          <button class=\"tab-btn\" data-tab=\"soil\">Soil Science</button>\n          <button class=\"tab-btn\" data-tab=\"climate\">Climate Factors</button>\n          <button class=\"tab-btn\" data-tab=\"yield\">Yield Factors</button>\n        </div>\n\n        <div class=\"education-content\">\n          ${this.createGDUContent()}\n          ${this.createGrowthStagesContent()}\n          ${this.createSoilScienceContent()}\n          ${this.createClimateContent()}\n          ${this.createYieldFactorsContent()}\n        </div>\n      </div>\n    `;\n\n    this.setupEventListeners();\n  }\n\n  private createGDUContent(): string {\n    return `\n      <div class=\"tab-content active\" id=\"gdu-content\">\n        <h3>Growing Degree Units (GDU) 🌡️</h3>\n        \n        <div class=\"content-section\">\n          <h4>What are Growing Degree Units?</h4>\n          <p>Growing Degree Units (GDU) are a measure of heat accumulation used to predict plant development. For corn, we use a base temperature of 50°F (10°C), meaning corn doesn't grow when temperatures are below this threshold.</p>\n          \n          <div class=\"formula-box\">\n            <h5>GDU Calculation Formula:</h5>\n            <code>Daily GDU = (Max Temp + Min Temp) ÷ 2 - Base Temp (50°F)</code>\n            <p><em>Note: Maximum temperature is capped at 86°F for corn calculations</em></p>\n          </div>\n\n          <div class=\"example-box\">\n            <h5>Example Calculation:</h5>\n            <p><strong>Day 1:</strong> High 85°F, Low 65°F</p>\n            <p>GDU = (85 + 65) ÷ 2 - 50 = 75 - 50 = <strong>25 GDU</strong></p>\n          </div>\n        </div>\n\n        <div class=\"content-section\">\n          <h4>Why GDU Matters</h4>\n          <ul>\n            <li><strong>Predictable Development:</strong> Corn development is more closely related to heat accumulation than calendar days</li>\n            <li><strong>Variety Selection:</strong> Different corn varieties require different total GDU to reach maturity</li>\n            <li><strong>Management Timing:</strong> Farmers use GDU to time fertilizer applications, pest management, and harvest</li>\n            <li><strong>Risk Assessment:</strong> Helps predict if corn will mature before first frost</li>\n          </ul>\n        </div>\n\n        <div class=\"gdu-chart\">\n          <h4>Typical Illinois GDU Accumulation</h4>\n          <canvas id=\"gdu-chart\" width=\"400\" height=\"200\"></canvas>\n        </div>\n      </div>\n    `;\n  }\n\n  private createGrowthStagesContent(): string {\n    return `\n      <div class=\"tab-content\" id=\"growth-content\">\n        <h3>Corn Growth Stages 🌱</h3>\n        \n        <div class=\"growth-stages-grid\">\n          <div class=\"stage-card\">\n            <div class=\"stage-icon\">🌱</div>\n            <h4>VE - Emergence</h4>\n            <p><strong>115 GDU</strong></p>\n            <p>Coleoptile breaks soil surface. Critical factors: soil temperature, moisture, planting depth.</p>\n          </div>\n\n          <div class=\"stage-card\">\n            <div class=\"stage-icon\">🌿</div>\n            <h4>V2 - 2nd Leaf</h4>\n            <p><strong>200 GDU</strong></p>\n            <p>Second leaf collar visible. Root system developing rapidly.</p>\n          </div>\n\n          <div class=\"stage-card\">\n            <div class=\"stage-icon\">🍃</div>\n            <h4>V6 - 6th Leaf</h4>\n            <p><strong>500 GDU</strong></p>\n            <p>Rapid growth begins. Growing point above soil surface. Critical for yield potential.</p>\n          </div>\n\n          <div class=\"stage-card\">\n            <div class=\"stage-icon\">🌾</div>\n            <h4>V10 - 10th Leaf</h4>\n            <p><strong>850 GDU</strong></p>\n            <p>Ear shoots developing. Plant height increasing rapidly. Moisture stress sensitivity increases.</p>\n          </div>\n\n          <div class=\"stage-card\">\n            <div class=\"stage-icon\">🌾</div>\n            <h4>VT - Tasseling</h4>\n            <p><strong>1400 GDU</strong></p>\n            <p>Tassel emergence and pollen shed. CRITICAL STAGE - moisture stress can severely impact yield.</p>\n          </div>\n\n          <div class=\"stage-card\">\n            <div class=\"stage-icon\">🌽</div>\n            <h4>R1 - Silking</h4>\n            <p><strong>1450 GDU</strong></p>\n            <p>Silks emerge from ear shoots. Pollination window. Heat and drought stress critical.</p>\n          </div>\n\n          <div class=\"stage-card\">\n            <div class=\"stage-icon\">🌽</div>\n            <h4>R2 - Blister</h4>\n            <p><strong>1650 GDU</strong></p>\n            <p>Kernels resemble blisters. Rapid grain fill begins. Kernel number determined.</p>\n          </div>\n\n          <div class=\"stage-card\">\n            <div class=\"stage-icon\">🌽</div>\n            <h4>R6 - Maturity</h4>\n            <p><strong>2700 GDU</strong></p>\n            <p>Black layer formation. Physiological maturity reached. Grain fill complete.</p>\n          </div>\n        </div>\n\n        <div class=\"critical-periods\">\n          <h4>Critical Growth Periods</h4>\n          <div class=\"critical-period\">\n            <h5>🔴 VT to R2 (Tasseling to Blister)</h5>\n            <p>Most critical period for yield determination. Moisture stress during this 2-3 week period can reduce yields by 3-7% per day of stress.</p>\n          </div>\n          <div class=\"critical-period\">\n            <h5>🟡 V6 to V10 (6th to 10th Leaf)</h5>\n            <p>Ear size determination period. Stress can reduce kernel rows and ear length.</p>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  private createSoilScienceContent(): string {\n    return `\n      <div class=\"tab-content\" id=\"soil-content\">\n        <h3>Soil Science for Corn Production 🏞️</h3>\n        \n        <div class=\"soil-types\">\n          <h4>Illinois Soil Types</h4>\n          \n          <div class=\"soil-type-card\">\n            <h5>Drummer Silty Clay Loam</h5>\n            <div class=\"soil-properties\">\n              <span class=\"property\">🏆 Corn Suitability: 95/100</span>\n              <span class=\"property\">💧 Drainage: Somewhat Poorly Drained</span>\n              <span class=\"property\">🍃 Organic Matter: 4.2%</span>\n            </div>\n            <p>Illinois' premier corn soil. Dark, rich, and fertile. Found in McLean County and other top producing areas.</p>\n          </div>\n\n          <div class=\"soil-type-card\">\n            <h5>Flanagan Silt Loam</h5>\n            <div class=\"soil-properties\">\n              <span class=\"property\">🏆 Corn Suitability: 92/100</span>\n              <span class=\"property\">💧 Drainage: Well Drained</span>\n              <span class=\"property\">🍃 Organic Matter: 3.8%</span>\n            </div>\n            <p>Excellent corn soil with good drainage. Common in east-central Illinois.</p>\n          </div>\n        </div>\n\n        <div class=\"soil-factors\">\n          <h4>Key Soil Factors for Corn</h4>\n          \n          <div class=\"factor-grid\">\n            <div class=\"factor-card\">\n              <h5>🌡️ Soil Temperature</h5>\n              <p>Corn germinates best when soil temperature is consistently above 50°F at 2-inch depth. Cold soils delay emergence and increase disease risk.</p>\n            </div>\n\n            <div class=\"factor-card\">\n              <h5>💧 Soil Moisture</h5>\n              <p>Adequate moisture is critical for germination and early growth. Overly wet soils can cause compaction and poor root development.</p>\n            </div>\n\n            <div class=\"factor-card\">\n              <h5>🧪 pH Level</h5>\n              <p>Optimal pH range: 6.0-6.8. Low pH reduces nutrient availability, while high pH can cause iron deficiency.</p>\n            </div>\n\n            <div class=\"factor-card\">\n              <h5>🍃 Organic Matter</h5>\n              <p>Higher organic matter improves water holding capacity, nutrient retention, and soil structure. Illinois soils average 3-5%.</p>\n            </div>\n\n            <div class=\"factor-card\">\n              <h5>🏗️ Soil Structure</h5>\n              <p>Good soil structure allows root penetration and water infiltration. Compaction can reduce yields significantly.</p>\n            </div>\n\n            <div class=\"factor-card\">\n              <h5>💨 Drainage</h5>\n              <p>Proper drainage prevents waterlogging while maintaining adequate moisture. Tile drainage is common in Illinois.</p>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"nutrient-section\">\n          <h4>Essential Nutrients</h4>\n          <div class=\"nutrient-bars\">\n            <div class=\"nutrient-bar\">\n              <label>Nitrogen (N) - 180 lbs/acre optimal</label>\n              <div class=\"bar\"><div class=\"fill\" style=\"width: 100%\"></div></div>\n            </div>\n            <div class=\"nutrient-bar\">\n              <label>Phosphorus (P₂O₅) - 40 lbs/acre optimal</label>\n              <div class=\"bar\"><div class=\"fill\" style=\"width: 80%\"></div></div>\n            </div>\n            <div class=\"nutrient-bar\">\n              <label>Potassium (K₂O) - 160 lbs/acre optimal</label>\n              <div class=\"bar\"><div class=\"fill\" style=\"width: 90%\"></div></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  private createClimateContent(): string {\n    return `\n      <div class=\"tab-content\" id=\"climate-content\">\n        <h3>Climate Factors 🌤️</h3>\n        \n        <div class=\"climate-overview\">\n          <h4>Illinois Climate Zones</h4>\n          <div class=\"zone-grid\">\n            <div class=\"zone-card\">\n              <h5>Northern Illinois (Zone 5a-5b)</h5>\n              <p><strong>GDD:</strong> 2,800-3,000</p>\n              <p><strong>Frost-Free Days:</strong> 160-170</p>\n              <p>Cooler temperatures, shorter growing season. Requires earlier maturing corn varieties.</p>\n            </div>\n            <div class=\"zone-card\">\n              <h5>Central Illinois (Zone 5b-6a)</h5>\n              <p><strong>GDD:</strong> 3,000-3,200</p>\n              <p><strong>Frost-Free Days:</strong> 170-180</p>\n              <p>Optimal corn growing conditions. Highest yields in the state.</p>\n            </div>\n            <div class=\"zone-card\">\n              <h5>Southern Illinois (Zone 6a-6b)</h5>\n              <p><strong>GDD:</strong> 3,200-3,400</p>\n              <p><strong>Frost-Free Days:</strong> 180-190</p>\n              <p>Warmer temperatures, longer season. Heat stress can be a concern.</p>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"weather-factors\">\n          <h4>Critical Weather Factors</h4>\n          \n          <div class=\"weather-impact\">\n            <h5>☀️ Temperature</h5>\n            <ul>\n              <li><strong>Optimal Growing Range:</strong> 77-91°F (25-33°C)</li>\n              <li><strong>Heat Stress:</strong> Above 95°F during pollination can reduce kernel set</li>\n              <li><strong>Cool Weather:</strong> Below 50°F stops growth completely</li>\n            </ul>\n          </div>\n\n          <div class=\"weather-impact\">\n            <h5>💧 Precipitation</h5>\n            <ul>\n              <li><strong>Annual Needs:</strong> 20-30 inches during growing season</li>\n              <li><strong>Critical Periods:</strong> VT to R2 needs 1-1.5 inches per week</li>\n              <li><strong>Timing:</strong> Distribution more important than total amount</li>\n            </ul>\n          </div>\n\n          <div class=\"weather-impact\">\n            <h5>🌬️ Wind</h5>\n            <ul>\n              <li><strong>Pollination:</strong> Light winds aid pollen dispersal</li>\n              <li><strong>Strong Winds:</strong> Can cause root lodging and stalk breakage</li>\n              <li><strong>Green Snap:</strong> Rapid growth + wind can break stalks</li>\n            </ul>\n          </div>\n\n          <div class=\"weather-impact\">\n            <h5>☁️ Solar Radiation</h5>\n            <ul>\n              <li><strong>Photosynthesis:</strong> More sunlight = more grain fill</li>\n              <li><strong>Cloudy Weather:</strong> During grain fill reduces yield</li>\n              <li><strong>Day Length:</strong> Corn is not sensitive to photoperiod</li>\n            </ul>\n          </div>\n        </div>\n\n        <div class=\"drought-stress\">\n          <h4>🔥 Drought Stress Impact</h4>\n          <div class=\"stress-timeline\">\n            <div class=\"stress-period\">\n              <h5>Early Season (V6-V10)</h5>\n              <p><strong>Impact:</strong> Reduced ear size, fewer kernel rows</p>\n              <p><strong>Yield Loss:</strong> 2-4% per day of stress</p>\n            </div>\n            <div class=\"stress-period critical\">\n              <h5>Pollination (VT-R2)</h5>\n              <p><strong>Impact:</strong> Poor kernel set, silk clipping</p>\n              <p><strong>Yield Loss:</strong> 3-7% per day of stress</p>\n            </div>\n            <div class=\"stress-period\">\n              <h5>Grain Fill (R3-R5)</h5>\n              <p><strong>Impact:</strong> Reduced kernel weight</p>\n              <p><strong>Yield Loss:</strong> 2-5% per day of stress</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  private createYieldFactorsContent(): string {\n    return `\n      <div class=\"tab-content\" id=\"yield-content\">\n        <h3>Yield Factors & Optimization 📈</h3>\n        \n        <div class=\"yield-equation\">\n          <h4>Corn Yield Components</h4>\n          <div class=\"equation-box\">\n            <p><strong>Yield = Plants/Acre × Ears/Plant × Kernels/Ear × Kernel Weight</strong></p>\n          </div>\n        </div>\n\n        <div class=\"yield-factors-grid\">\n          <div class=\"yield-factor\">\n            <h5>🌱 Plant Population</h5>\n            <div class=\"factor-details\">\n              <p><strong>Optimal:</strong> 32,000-36,000 plants/acre</p>\n              <p><strong>Row Spacing:</strong> 30-inch rows standard</p>\n              <p><strong>Impact:</strong> Too low = fewer plants, too high = competition</p>\n            </div>\n          </div>\n\n          <div class=\"yield-factor\">\n            <h5>🌽 Ear Number</h5>\n            <div class=\"factor-details\">\n              <p><strong>Typical:</strong> 1.0-1.05 ears per plant</p>\n              <p><strong>Barren Plants:</strong> Stress can prevent ear development</p>\n              <p><strong>Management:</strong> Balanced nutrition and moisture</p>\n            </div>\n          </div>\n\n          <div class=\"yield-factor\">\n            <h5>🔢 Kernels per Ear</h5>\n            <div class=\"factor-details\">\n              <p><strong>Range:</strong> 600-1,000 kernels per ear</p>\n              <p><strong>Determined:</strong> V6 to V18 growth stages</p>\n              <p><strong>Factors:</strong> Stress, nutrition, genetics</p>\n            </div>\n          </div>\n\n          <div class=\"yield-factor\">\n            <h5>⚖️ Kernel Weight</h5>\n            <div class=\"factor-details\">\n              <p><strong>Range:</strong> 250-400 mg per kernel</p>\n              <p><strong>Determined:</strong> During grain fill (R2-R6)</p>\n              <p><strong>Critical:</strong> Weather during grain fill period</p>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"management-practices\">\n          <h4>Best Management Practices</h4>\n          \n          <div class=\"practice-category\">\n            <h5>🌾 Variety Selection</h5>\n            <ul>\n              <li>Choose varieties adapted to your area's GDD</li>\n              <li>Consider disease resistance packages</li>\n              <li>Match maturity to field and market needs</li>\n            </ul>\n          </div>\n\n          <div class=\"practice-category\">\n            <h5>🚜 Planting</h5>\n            <ul>\n              <li>Plant when soil temperature is consistently above 50°F</li>\n              <li>Optimal planting date: May 1-15 in Illinois</li>\n              <li>Plant depth: 1.5-2.5 inches depending on conditions</li>\n            </ul>\n          </div>\n\n          <div class=\"practice-category\">\n            <h5>🧪 Nutrition</h5>\n            <ul>\n              <li>Soil test to determine nutrient needs</li>\n              <li>Split nitrogen applications for efficiency</li>\n              <li>Consider variable rate application</li>\n            </ul>\n          </div>\n\n          <div class=\"practice-category\">\n            <h5>🐛 Pest Management</h5>\n            <ul>\n              <li>Scout regularly for insects and diseases</li>\n              <li>Use economic thresholds for treatment decisions</li>\n              <li>Integrate multiple control methods</li>\n            </ul>\n          </div>\n        </div>\n\n        <div class=\"economic-analysis\">\n          <h4>💰 Economic Considerations</h4>\n          <div class=\"cost-breakdown\">\n            <div class=\"cost-item\">\n              <span>Seed</span>\n              <span>$120-150/acre</span>\n            </div>\n            <div class=\"cost-item\">\n              <span>Fertilizer</span>\n              <span>$200-300/acre</span>\n            </div>\n            <div class=\"cost-item\">\n              <span>Chemicals</span>\n              <span>$80-120/acre</span>\n            </div>\n            <div class=\"cost-item\">\n              <span>Field Operations</span>\n              <span>$150-200/acre</span>\n            </div>\n            <div class=\"cost-item total\">\n              <span><strong>Total Variable Costs</strong></span>\n              <span><strong>$550-770/acre</strong></span>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  private setupEventListeners(): void {\n    this.container.addEventListener('click', (e) => {\n      const target = e.target as HTMLElement;\n      \n      if (target.classList.contains('tab-btn')) {\n        // Handle tab switching\n        const tabName = target.getAttribute('data-tab');\n        \n        // Update active tab button\n        this.container.querySelectorAll('.tab-btn').forEach(btn => \n          btn.classList.remove('active')\n        );\n        target.classList.add('active');\n        \n        // Update active content\n        this.container.querySelectorAll('.tab-content').forEach(content => \n          content.classList.remove('active')\n        );\n        \n        const activeContent = this.container.querySelector(`#${tabName}-content`);\n        activeContent?.classList.add('active');\n      }\n    });\n  }\n\n  public showTab(tabName: string): void {\n    const tabButton = this.container.querySelector(`[data-tab=\"${tabName}\"]`);\n    if (tabButton) {\n      (tabButton as HTMLElement).click();\n    }\n  }\n}","import { CountyData } from '../data/illinois-counties';\nimport { ProfessionalGDUCalculator, YieldFactors } from '../core/gdu-calculator-pro';\nimport { IllinoisCountyMap } from '../components/illinois-county-map';\nimport { EducationalContent } from '../components/educational-content';\n// import { CornField3D } from '../components/corn-field-3d';\n\ninterface SimulationState {\n  selectedCounty: CountyData | null;\n  currentDay: number;\n  totalGDU: number;\n  currentGrowthStage: number;\n  plantingDate: Date;\n  yieldFactors: YieldFactors;\n  isRunning: boolean;\n  speed: number;\n}\n\nexport class CornViewApplication {\n  private app: HTMLElement;\n  private state!: SimulationState;\n  private gduCalculator: ProfessionalGDUCalculator;\n  private countyMap!: IllinoisCountyMap;\n  private educationalContent!: EducationalContent;\n  // private cornField3D: CornField3D | null = null;\n  private animationId: number | null = null;\n\n  constructor() {\n    this.app = document.getElementById('app')!;\n    this.gduCalculator = new ProfessionalGDUCalculator();\n    this.initializeState();\n    this.initializeUI();\n  }\n\n  private initializeState(): void {\n    const currentYear = new Date().getFullYear();\n    this.state = {\n      selectedCounty: null,\n      currentDay: 1,\n      totalGDU: 0,\n      currentGrowthStage: 0,\n      plantingDate: new Date(currentYear, 4, 10), // May 10th\n      yieldFactors: {\n        soilMoisture: 0.8,\n        nitrogen: 180,\n        phosphorus: 40,\n        potassium: 160,\n        plantPopulation: 34000,\n        diseasePress: 0.1,\n        insectPress: 0.05,\n        weedPress: 0.1\n      },\n      isRunning: false,\n      speed: 1\n    };\n  }\n\n  private initializeUI(): void {\n    this.app.innerHTML = `\n      <div class=\"cornview-app\">\n        <!-- Header -->\n        <header class=\"app-header\">\n          <div class=\"header-content\">\n            <div class=\"logo-section\">\n              <h1>🌽 CornView Illinois</h1>\n              <p>Professional Corn Production Simulation & Analysis</p>\n            </div>\n            <div class=\"header-stats\">\n              <div class=\"stat-item\">\n                <span class=\"stat-label\">Selected County</span>\n                <span class=\"stat-value\" id=\"selected-county\">None Selected</span>\n              </div>\n              <div class=\"stat-item\">\n                <span class=\"stat-label\">Total GDU</span>\n                <span class=\"stat-value\" id=\"total-gdu\">0</span>\n              </div>\n              <div class=\"stat-item\">\n                <span class=\"stat-label\">Growth Stage</span>\n                <span class=\"stat-value\" id=\"growth-stage\">Pre-Emergence</span>\n              </div>\n              <div class=\"stat-item\">\n                <span class=\"stat-label\">Predicted Yield</span>\n                <span class=\"stat-value\" id=\"predicted-yield\">-- bu/acre</span>\n              </div>\n            </div>\n          </div>\n        </header>\n\n        <!-- Main Content -->\n        <main class=\"app-main\">\n          <!-- Step 1: County Selection -->\n          <section class=\"step-section ${this.state.selectedCounty ? 'completed' : 'active'}\" id=\"county-selection\">\n            <div class=\"step-header\">\n              <h2><span class=\"step-number\">1</span> Select Illinois County</h2>\n              <p>Choose a county to analyze corn production potential and run simulations</p>\n            </div>\n            <div id=\"county-map-container\"></div>\n          </section>\n\n          <!-- Step 2: Simulation Configuration -->\n          <section class=\"step-section ${this.state.selectedCounty ? 'active' : 'disabled'}\" id=\"simulation-config\">\n            <div class=\"step-header\">\n              <h2><span class=\"step-number\">2</span> Configure Simulation</h2>\n              <p>Set planting conditions and environmental factors</p>\n            </div>\n            \n            <div class=\"config-grid\">\n              <div class=\"config-panel\">\n                <h3>🌱 Planting Conditions</h3>\n                <div class=\"form-group\">\n                  <label for=\"planting-date\">Planting Date:</label>\n                  <input type=\"date\" id=\"planting-date\" value=\"${this.formatDate(this.state.plantingDate)}\">\n                </div>\n                <div class=\"form-group\">\n                  <label for=\"planting-depth\">Planting Depth (inches):</label>\n                  <select id=\"planting-depth\">\n                    <option value=\"1.5\">1.5 inches</option>\n                    <option value=\"2\" selected>2.0 inches</option>\n                    <option value=\"2.5\">2.5 inches</option>\n                    <option value=\"3\">3.0 inches</option>\n                  </select>\n                </div>\n                <div class=\"form-group\">\n                  <label for=\"plant-population\">Plant Population (plants/acre):</label>\n                  <input type=\"range\" id=\"plant-population\" min=\"30000\" max=\"38000\" value=\"34000\" step=\"1000\">\n                  <span id=\"population-display\">34,000</span>\n                </div>\n              </div>\n\n              <div class=\"config-panel\">\n                <h3>🧪 Nutrient Management</h3>\n                <div class=\"form-group\">\n                  <label for=\"nitrogen-rate\">Nitrogen Rate (lbs/acre):</label>\n                  <input type=\"range\" id=\"nitrogen-rate\" min=\"120\" max=\"220\" value=\"180\" step=\"10\">\n                  <span id=\"nitrogen-display\">180</span>\n                </div>\n                <div class=\"form-group\">\n                  <label for=\"phosphorus-rate\">Phosphorus Rate (lbs/acre):</label>\n                  <input type=\"range\" id=\"phosphorus-rate\" min=\"20\" max=\"60\" value=\"40\" step=\"5\">\n                  <span id=\"phosphorus-display\">40</span>\n                </div>\n                <div class=\"form-group\">\n                  <label for=\"potassium-rate\">Potassium Rate (lbs/acre):</label>\n                  <input type=\"range\" id=\"potassium-rate\" min=\"100\" max=\"200\" value=\"160\" step=\"10\">\n                  <span id=\"potassium-display\">160</span>\n                </div>\n              </div>\n\n              <div class=\"config-panel\">\n                <h3>🌧️ Environmental Conditions</h3>\n                <div class=\"form-group\">\n                  <label for=\"soil-moisture\">Soil Moisture Level:</label>\n                  <select id=\"soil-moisture\">\n                    <option value=\"0.4\">Drought Stress</option>\n                    <option value=\"0.6\">Dry Conditions</option>\n                    <option value=\"0.8\" selected>Adequate Moisture</option>\n                    <option value=\"1.0\">Optimal Moisture</option>\n                  </select>\n                </div>\n                <div class=\"form-group\">\n                  <label for=\"disease-pressure\">Disease Pressure:</label>\n                  <select id=\"disease-pressure\">\n                    <option value=\"0.05\" selected>Low</option>\n                    <option value=\"0.15\">Moderate</option>\n                    <option value=\"0.3\">High</option>\n                  </select>\n                </div>\n                <div class=\"form-group\">\n                  <label for=\"pest-pressure\">Insect Pressure:</label>\n                  <select id=\"pest-pressure\">\n                    <option value=\"0.05\" selected>Low</option>\n                    <option value=\"0.1\">Moderate</option>\n                    <option value=\"0.25\">High</option>\n                  </select>\n                </div>\n              </div>\n            </div>\n          </section>\n\n          <!-- Step 3: Simulation Visualization -->\n          <section class=\"step-section ${this.state.selectedCounty ? 'active' : 'disabled'}\" id=\"simulation-viz\">\n            <div class=\"step-header\">\n              <h2><span class=\"step-number\">3</span> Run Simulation</h2>\n              <p>Watch corn growth progression and analyze yield predictions</p>\n            </div>\n            \n            <div class=\"simulation-controls\">\n              <button id=\"play-simulation\" class=\"control-btn primary\">▶ Start Simulation</button>\n              <button id=\"pause-simulation\" class=\"control-btn\" disabled>⏸ Pause</button>\n              <button id=\"reset-simulation\" class=\"control-btn\">🔄 Reset</button>\n              <div class=\"speed-control\">\n                <label for=\"simulation-speed\">Speed:</label>\n                <input type=\"range\" id=\"simulation-speed\" min=\"1\" max=\"10\" value=\"5\">\n                <span id=\"speed-display\">5x</span>\n              </div>\n            </div>\n\n            <div class=\"visualization-container\">\n              <div class=\"field-visualization\">\n                <h3>Corn Field Visualization</h3>\n                <div id=\"corn-field-3d\"></div>\n              </div>\n              \n              <div class=\"growth-chart\">\n                <h3>Growth Progress</h3>\n                <canvas id=\"growth-chart\" width=\"400\" height=\"300\"></canvas>\n              </div>\n            </div>\n\n            <div class=\"current-conditions\">\n              <div class=\"condition-card\">\n                <h4>Current Growth Stage</h4>\n                <div id=\"current-stage-info\">\n                  <p>Stage: <span id=\"stage-name\">Pre-Emergence</span></p>\n                  <p>Description: <span id=\"stage-description\">Waiting for emergence</span></p>\n                </div>\n              </div>\n              \n              <div class=\"condition-card\">\n                <h4>Weather Conditions</h4>\n                <div id=\"weather-info\">\n                  <p>Temperature: <span id=\"current-temp\">--°F</span></p>\n                  <p>Daily GDU: <span id=\"daily-gdu\">--</span></p>\n                </div>\n              </div>\n              \n              <div class=\"condition-card\">\n                <h4>Yield Prediction</h4>\n                <div id=\"yield-info\">\n                  <p>Current: <span id=\"current-yield\">-- bu/acre</span></p>\n                  <p>Potential: <span id=\"potential-yield\">-- bu/acre</span></p>\n                </div>\n              </div>\n            </div>\n          </section>\n\n          <!-- Step 4: Analysis & Results -->\n          <section class=\"step-section\" id=\"analysis-results\">\n            <div class=\"step-header\">\n              <h2><span class=\"step-number\">4</span> Analysis & Results</h2>\n              <p>Detailed analysis of simulation results and recommendations</p>\n            </div>\n            \n            <div class=\"results-grid\">\n              <div class=\"result-card\">\n                <h3>📊 Yield Analysis</h3>\n                <canvas id=\"yield-chart\" width=\"300\" height=\"200\"></canvas>\n              </div>\n              \n              <div class=\"result-card\">\n                <h3>🌡️ GDU Accumulation</h3>\n                <canvas id=\"gdu-accumulation-chart\" width=\"300\" height=\"200\"></canvas>\n              </div>\n              \n              <div class=\"result-card\">\n                <h3>💰 Economic Analysis</h3>\n                <div id=\"economic-summary\">\n                  <p>Revenue: <span id=\"gross-revenue\">$--</span></p>\n                  <p>Costs: <span id=\"total-costs\">$--</span></p>\n                  <p>Net Income: <span id=\"net-income\">$--</span></p>\n                </div>\n              </div>\n            </div>\n          </section>\n\n          <!-- Educational Content -->\n          <section class=\"step-section\" id=\"educational-section\">\n            <div class=\"step-header\">\n              <h2><span class=\"step-number\">📚</span> Learn More</h2>\n              <p>Understand the science behind corn production and yield prediction</p>\n            </div>\n            <div id=\"educational-content\"></div>\n          </section>\n        </main>\n\n        <!-- Footer -->\n        <footer class=\"app-footer\">\n          <div class=\"footer-content\">\n            <p>Created by <a href=\"https://logannitzsche.com\" target=\"_blank\">Logan Nitzsche</a> in association with <strong>Southern Illinois University Edwardsville</strong></p>\n            <p>Data sources: University of Illinois Extension, USDA-NASS, Illinois Corn Growers Association</p>\n          </div>\n        </footer>\n      </div>\n    `;\n\n    this.initializeComponents();\n    this.setupEventListeners();\n  }\n\n  private initializeComponents(): void {\n    // Initialize county map\n    const countyMapContainer = document.getElementById('county-map-container')!;\n    this.countyMap = new IllinoisCountyMap(countyMapContainer, (county) => {\n      this.selectCounty(county);\n    });\n\n    // Initialize educational content\n    const educationalContainer = document.getElementById('educational-content')!;\n    this.educationalContent = new EducationalContent(educationalContainer);\n\n    // Initialize 3D field (commented out for now to avoid Three.js import issues)\n    // const fieldContainer = document.getElementById('corn-field-3d')!;\n    // this.cornField3D = new CornField3D(fieldContainer);\n    \n    // Prevent unused variable warnings\n    console.log('Components initialized:', {\n      countyMap: !!this.countyMap,\n      educationalContent: !!this.educationalContent\n    });\n  }\n\n  private setupEventListeners(): void {\n    // Simulation controls\n    document.getElementById('play-simulation')?.addEventListener('click', () => this.startSimulation());\n    document.getElementById('pause-simulation')?.addEventListener('click', () => this.pauseSimulation());\n    document.getElementById('reset-simulation')?.addEventListener('click', () => this.resetSimulation());\n\n    // Configuration inputs\n    document.getElementById('planting-date')?.addEventListener('change', (e) => {\n      const target = e.target as HTMLInputElement;\n      this.state.plantingDate = new Date(target.value);\n      this.updateSimulation();\n    });\n\n    // Range input updates\n    this.setupRangeInputs();\n  }\n\n  private setupRangeInputs(): void {\n    const rangeInputs = [\n      { id: 'plant-population', display: 'population-display', format: (v: number) => `${v.toLocaleString()}` },\n      { id: 'nitrogen-rate', display: 'nitrogen-display', format: (v: number) => `${v}` },\n      { id: 'phosphorus-rate', display: 'phosphorus-display', format: (v: number) => `${v}` },\n      { id: 'potassium-rate', display: 'potassium-display', format: (v: number) => `${v}` },\n      { id: 'simulation-speed', display: 'speed-display', format: (v: number) => `${v}x` }\n    ];\n\n    rangeInputs.forEach(({ id, display, format }) => {\n      const input = document.getElementById(id) as HTMLInputElement;\n      const displayElement = document.getElementById(display);\n      \n      if (input && displayElement) {\n        input.addEventListener('input', () => {\n          const value = parseInt(input.value);\n          displayElement.textContent = format(value);\n          \n          // Update state\n          switch (id) {\n            case 'plant-population':\n              this.state.yieldFactors.plantPopulation = value;\n              break;\n            case 'nitrogen-rate':\n              this.state.yieldFactors.nitrogen = value;\n              break;\n            case 'phosphorus-rate':\n              this.state.yieldFactors.phosphorus = value;\n              break;\n            case 'potassium-rate':\n              this.state.yieldFactors.potassium = value;\n              break;\n            case 'simulation-speed':\n              this.state.speed = value;\n              break;\n          }\n          \n          this.updateSimulation();\n        });\n      }\n    });\n  }\n\n  private selectCounty(county: CountyData): void {\n    this.state.selectedCounty = county;\n    \n    // Update UI\n    document.getElementById('selected-county')!.textContent = `${county.name} County`;\n    \n    // Enable next sections\n    document.getElementById('simulation-config')?.classList.remove('disabled');\n    document.getElementById('simulation-viz')?.classList.remove('disabled');\n    \n    // Mark county selection as completed\n    document.getElementById('county-selection')?.classList.remove('active');\n    document.getElementById('county-selection')?.classList.add('completed');\n    \n    // Calculate initial GDU\n    this.calculateInitialGDU();\n    this.updateDisplay();\n  }\n\n  private calculateInitialGDU(): void {\n    if (!this.state.selectedCounty) return;\n\n    const plantingDepthInput = document.getElementById('planting-depth') as HTMLSelectElement;\n    const plantingDepth = parseFloat(plantingDepthInput?.value || '2');\n\n    this.state.totalGDU = this.gduCalculator.calculateInitialGDU(\n      this.state.selectedCounty,\n      {\n        plantingDate: this.state.plantingDate,\n        plantingDepth: plantingDepth,\n        seedTreatment: true,\n        soilTemp: 55\n      }\n    );\n  }\n\n  private startSimulation(): void {\n    console.log('Start simulation called', {\n      hasSelectedCounty: !!this.state.selectedCounty,\n      currentDay: this.state.currentDay,\n      totalGDU: this.state.totalGDU\n    });\n    \n    if (!this.state.selectedCounty) {\n      console.warn('No county selected for simulation');\n      return;\n    }\n\n    this.state.isRunning = true;\n    \n    // Update button states\n    const playBtn = document.getElementById('play-simulation') as HTMLButtonElement;\n    const pauseBtn = document.getElementById('pause-simulation') as HTMLButtonElement;\n    \n    if (playBtn) playBtn.disabled = true;\n    if (pauseBtn) pauseBtn.disabled = false;\n    \n    this.runSimulationLoop();\n  }\n\n  private pauseSimulation(): void {\n    this.state.isRunning = false;\n    \n    // Update button states\n    const playBtn = document.getElementById('play-simulation') as HTMLButtonElement;\n    const pauseBtn = document.getElementById('pause-simulation') as HTMLButtonElement;\n    \n    playBtn.disabled = false;\n    pauseBtn.disabled = true;\n    \n    if (this.animationId) {\n      cancelAnimationFrame(this.animationId);\n      this.animationId = null;\n    }\n  }\n\n  private resetSimulation(): void {\n    this.pauseSimulation();\n    this.state.currentDay = 1;\n    this.calculateInitialGDU();\n    this.state.currentGrowthStage = 0;\n    this.updateDisplay();\n  }\n\n  private runSimulationLoop(): void {\n    if (!this.state.isRunning || !this.state.selectedCounty) {\n      console.log('Simulation loop stopped', {\n        isRunning: this.state.isRunning,\n        hasCounty: !!this.state.selectedCounty\n      });\n      return;\n    }\n\n    // Simulate a day\n    this.simulateDay();\n    \n    // Schedule next iteration\n    const delay = Math.max(100, 1000 / this.state.speed);\n    setTimeout(() => {\n      if (this.state.isRunning) {\n        this.animationId = requestAnimationFrame(() => this.runSimulationLoop());\n      }\n    }, delay);\n  }\n\n  private simulateDay(): void {\n    if (!this.state.selectedCounty) return;\n\n    // Generate weather data (simplified)\n    const maxTemp = 75 + Math.random() * 20; // 75-95°F\n    const minTemp = maxTemp - 15 - Math.random() * 10; // 10-25°F lower\n\n    // Calculate daily GDU\n    const dailyGDU = this.gduCalculator.calculateDailyGDU(maxTemp, minTemp);\n    this.state.totalGDU += dailyGDU;\n\n    // Update growth stage\n    const currentStage = this.gduCalculator.getCurrentGrowthStage(this.state.totalGDU);\n    if (currentStage) {\n      const stageIndex = this.gduCalculator.getAllGrowthStages().findIndex(s => s.code === currentStage.code);\n      this.state.currentGrowthStage = stageIndex;\n    }\n\n    // Increment day\n    this.state.currentDay++;\n\n    // Update displays\n    this.updateDisplay();\n    \n    const currentTempElement = document.getElementById('current-temp');\n    const dailyGduElement = document.getElementById('daily-gdu');\n    \n    if (currentTempElement) {\n      currentTempElement.textContent = `${Math.round(maxTemp)}°F`;\n    }\n    if (dailyGduElement) {\n      dailyGduElement.textContent = Math.round(dailyGDU).toString();\n    }\n\n    // Stop at maturity\n    if (this.state.totalGDU >= 2700) {\n      this.pauseSimulation();\n    }\n  }\n\n  private updateSimulation(): void {\n    if (!this.state.selectedCounty) return;\n\n    const currentYield = this.gduCalculator.calculatePotentialYield(\n      this.state.selectedCounty,\n      this.state.totalGDU,\n      this.state.yieldFactors\n    );\n\n    const currentYieldElement = document.getElementById('current-yield');\n    const potentialYieldElement = document.getElementById('potential-yield');\n    \n    if (currentYieldElement) {\n      currentYieldElement.textContent = `${currentYield} bu/acre`;\n    }\n    if (potentialYieldElement) {\n      potentialYieldElement.textContent = `${this.state.selectedCounty.production.averageYield} bu/acre`;\n    }\n  }\n\n  private updateDisplay(): void {\n    // Update header stats\n    const totalGduElement = document.getElementById('total-gdu');\n    if (totalGduElement) {\n      totalGduElement.textContent = Math.round(this.state.totalGDU).toString();\n    }\n\n    // Update growth stage\n    const currentStage = this.gduCalculator.getCurrentGrowthStage(this.state.totalGDU);\n    if (currentStage) {\n      const growthStageElement = document.getElementById('growth-stage');\n      const stageNameElement = document.getElementById('stage-name');\n      const stageDescElement = document.getElementById('stage-description');\n      \n      if (growthStageElement) growthStageElement.textContent = currentStage.stage;\n      if (stageNameElement) stageNameElement.textContent = currentStage.stage;\n      if (stageDescElement) stageDescElement.textContent = currentStage.description;\n    }\n\n    // Update yield prediction\n    if (this.state.selectedCounty) {\n      const predictedYield = this.gduCalculator.calculatePotentialYield(\n        this.state.selectedCounty,\n        this.state.totalGDU,\n        this.state.yieldFactors\n      );\n      const predictedYieldElement = document.getElementById('predicted-yield');\n      if (predictedYieldElement) {\n        predictedYieldElement.textContent = `${predictedYield} bu/acre`;\n      }\n    }\n\n    this.updateSimulation();\n  }\n\n  private formatDate(date: Date): string {\n    return date.toISOString().split('T')[0];\n  }\n}","import './style.css';\nimport { CornViewApplication } from './app/corn-view-app';\n\n// Initialize the application when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n  console.log('🌽 CornView Illinois Professional Simulation Starting...');\n  \n  try {\n    new CornViewApplication();\n    console.log('✅ CornView Illinois Simulation Initialized Successfully');\n  } catch (error) {\n    console.error('❌ Failed to initialize CornView Simulation:', error);\n    \n    // Show error to user\n    const app = document.getElementById('app');\n    if (app) {\n      app.innerHTML = `\n        <div style=\"text-align: center; padding: 50px; color: red;\">\n          <h1>Error Loading CornView Simulation</h1>\n          <p>Please refresh the page and try again.</p>\n          <p style=\"font-size: 12px; color: #666;\">${error}</p>\n        </div>\n      `;\n    }\n  }\n});\n\n// Add service worker for PWA capabilities (optional)\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', () => {\n    navigator.serviceWorker.register('/sw.js')\n      .then((registration) => {\n        console.log('SW registered: ', registration);\n      })\n      .catch((registrationError) => {\n        console.log('SW registration failed: ', registrationError);\n      });\n  });\n}"],"names":["ProfessionalGDUCalculator","__publicField","maxTemp","minTemp","cappedMax","cappedMin","avgTemp","countyData","plantingFactors","initialGDU","optimalStart","optimalEnd","daysDiff","totalGDU","yieldFactors","potentialYield","gduEfficiency","soilRating","popOptimal","popFactor","nFactor","pFactor","kFactor","nutrientFactor","i","stage","currentGDU","averageDailyGDU","nextStage","gduNeeded","stressType","severity","growthStage","baseImpact","criticalMultiplier","illinoisCounties","IllinoisCountyMap","container","onCountySelect","county","e","target","countyName","c","sortSelect","searchInput","card","selectedCard","sortBy","cardsContainer","cards","b","aCounty","bCounty","searchTerm","term","cardElement","_a","EducationalContent","tabName","btn","content","activeContent","tabButton","CornViewApplication","currentYear","countyMapContainer","educationalContainer","_b","_c","_d","v","id","display","format","input","displayElement","value","plantingDepthInput","plantingDepth","playBtn","pauseBtn","delay","dailyGDU","currentStage","stageIndex","s","currentTempElement","dailyGduElement","currentYield","currentYieldElement","potentialYieldElement","totalGduElement","growthStageElement","stageNameElement","stageDescElement","predictedYield","predictedYieldElement","date","error","app","registration","registrationError"],"mappings":"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"}